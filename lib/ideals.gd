DeclareAttribute("LeftIdeals", IsSkewBrace);
DeclareAttribute("Ideals", IsSkewBrace);
DeclareAttribute("Socle", IsSkewBrace);

#!
#! @Arguments A
#! @Returns a list of left ideals 
#! @Description
#! The left series of a skew brace $A$ is defined recursively as 
#! $A^1=A$ and $A^{n+1}=A*A^n$ for $n\geq1$, where $a*b=\lambda_a(b)-b$
#! @ExampleSession
#! gap> br := SmallSkewBrace(8,20);
#! <skew brace of size 8>
#! gap> LeftSeries(br);
#! [ <skew brace of size 8>, <brace of size 2>, <brace of size 1> ]
#! @EndExampleSession
DeclareAttribute("LeftSeries", IsSkewBrace);

#!
#! @Arguments A 
#! @Returns a list of ideals 
#! @Description
#! The Smoktunowicz's series of a skew brace $A$ is defined recursively as 
#! $A^{[1]}=A$ and 
#! $A^{[n+1]}=\sum_{i=1}^n A^{[i]}*A^{[n+1-i]}$ 
#! for $n\geq1$, where $a*b=\lambda_a(b)-b$. 
#! @ExampleSession
#! gap> br := SmallSkewBrace(10,2);
#! <skew brace of size 10>
#! gap> SmoktunowiczSeries(br);
#! [ <skew brace of size 10>, <brace of size 1> ]
#! @EndExampleSession
DeclareAttribute("SmoktunowiczSeries", IsSkewBrace);

#! 
DeclareAttribute("RightSeries", IsSkewBrace);

#!
DeclareAttribute("SocleSeries", IsSkewBrace);

#!
DeclareAttribute("MultipermutationLevel", IsSkewBrace);
DeclareAttribute("Fix", IsSkewBrace);
DeclareAttribute("KernelOfLambda", IsSkewBrace);

DeclareProperty("IsSimpleSkewBrace", IsSkewBrace);
DeclareProperty("IsLeftNilpotent", IsSkewBrace);
DeclareProperty("IsRightNilpotent", IsSkewBrace);
DeclareProperty("IsMultipermutation", IsSkewBrace);

DeclareOperation("IsIdeal", [ IsSkewBrace, IsCollection ]);
DeclareOperation("IsLeftIdeal", [ IsSkewBrace, IsCollection ]);
DeclareOperation("AsIdeal", [ IsSkewBrace, IsCollection ]);

DeclareOperation("Quotient", [IsSkewBrace, IsSkewBrace]);

DeclareGlobalFunction("SubSkewBrace");

#!
#! @Arguments obj
#! @Returns <A>true</A> if the skew brace <A>obj</A> is prime
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("IsPrime", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns <A>true</A> if the ideal <A>obj</A> is prime
#! @Description
#! An ideal $I$ of a skew brace $A$ is said to be prime if $A/I$ is a prime skew brace.
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("IsPrimeIdeal", IsSkewBrace and IsIdealInParent);

#!
#! @Arguments obj
#! @Returns the list of prime ideals of the skew brace <A>obj</A> 
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("PrimeIdeals", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns <A>true</A> if the skew brace <A>obj</A> is semiprime
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("IsSemiprime", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns <A>true</A> if the ideal <A>obj</A> is semiprime
#! @Description
#! An ideal $I$ of a skew brace $A$ is said to be semiprime if $A/I$ is a semiprime skew brace.
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("IsSemiprimeIdeal", IsSkewBrace and IsIdealInParent);

#!
#! @Arguments obj
#! @Returns the list of semiprime ideals of the skew brace <A>obj</A>
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("SemiprimeIdeals", IsSkewBrace);

#!
#! @Arguments ideal1,ideal2
#! @Returns the intersection of <A>ideal1</A> and <A>ideal2</A> 
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareOperation("IntersectionOfTwoIdeals", [ IsSkewBrace and IsIdealInParent, IsSkewBrace and IsIdealInParent ]);

#!
#! @Arguments ideal1,ideal2
#! @Returns the sum of <A>ideal1</A> and <A>ideal2</A> 
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareOperation("SumOfTwoIdeals", [ IsSkewBrace and IsIdealInParent, IsSkewBrace and IsIdealInParent ]);

#!
#! @Arguments obj
#! @Returns the Baer radical of the skew brace <A>obj</A>
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("BaerRadical", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns <A>true</A> if the Baer radical of the skew brace <A>obj</A> is equal to <A>obj</A>
#! @Description
#! @ExampleSession
#! @EndExampleSession
DeclareProperty("IsBaer", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns the Wedderburn radical of the skew brace <A>obj</A>
#! @Description The Wedderburn radical of a skew brace is the intersection of all its prime ideals
#! @ExampleSession
#! gap> br := SmallSkewBrace(6,2);;
#! gap> WedderburnRadical(br);
#! <brace of size 3>
#! @EndExampleSession
DeclareAttribute("WedderburnRadical", IsSkewBrace);

#!
#! @Arguments obj,subset
#! @Returns the ideal of <A>obj</A> generated by the given <A>subset</A>
#! @Description 
#! The ideal of a skew brace $A$ generated by a subset $X$ is the intersection of all the ideals of $A$ containing $X$.
#! @ExampleSession
#! @EndExampleSession
DeclareOperation("IdealGeneratedBy", [ IsSkewBrace, IsCollection ]);

#!
#! @Arguments obj
#! @Returns the list of left nilpotent ideals of <A>obj</A>
#! @Description 
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("LeftNilpotentIdeals", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns the list of right nilpotent ideals of <A>obj</A>
#! @Description 
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("RightNilpotentIdeals", IsSkewBrace);

#!
#! @Arguments obj
#! @Returns a list with the solvable series of the skew brace <A>obj</A>
#! @Description
#! The solvable series of a skew brace $A$ is defined recursively as 
#! $A_{\{1\}}=A$ and $A_{\{n+1\}}=A_{\{n\}}*A_{\{n\}}$ for $n\geq1$, where $a*b=\lambda_a(b)-b$
#! @ExampleSession
#! @EndExampleSession
DeclareAttribute("SolvableSeries", IsSkewBrace);

#! @Arguments obj
#! @Returns true if the skew brace <A>obj</A> is solvable 
#! @Description
#! A skew brace $A$ is solvable if there exists some $n$ such that $A_{\{n\}}=\{0\}$. 
#! @ExampleSession
#! @EndExampleSession
#DeclareProperty("IsSolvable", IsSkewBrace);


